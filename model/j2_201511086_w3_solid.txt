#201511086 김민지 - SOLID 원칙 2

  Comparator에 SOLID원칙이 어떻게 적용되었을지 생각해보았다.
  먼저 SRP, 단일책임의 원칙이 적용된 부분은 다양한 기능의 Comparator을 각각의 class로 만든 부분인 것 같다.  Comparator가 int의 비교, string의 비교, date의 비교 등의 다양한 기능을 가지게 되면 후에 유지보수에 드는 비용이 증가하기 때문에 책임을 분리하기 위하여 IntegerComparator, StringComparator, DateComparator 등의 class를 새롭게 선언하였다.
  두 번째로 OCP, 개방-폐쇄 원칙이 적용된 부분은 Comparator를 인터페이스로 작성하고 IntegerComparator등 각각의 기능을 가지는 클래스에서 이를 수정한 부분이다.
  세 번째로 LSP, 리스코프 치환 원칙이 적용된 부분은 'j2_201511086_w3main.java'에서
	Comparator stringComp=new StringComparator();
	Comparator integerComp=new IntegerComparator();
과 같은 부분이다. 이 코드는 Comparator의 자식 클래스인 IntegerComparator, StringComparator에서 인스턴스를 생성하고, 그것으로 부모 클래스(인터페이스)인 Comparator의 인스턴스를 대체하였다.
  네 번째로 ISP, 인터페이스 분리 원칙이 적용된 부분은 없다. 이는 인터페이스 분리 원칙이 필요한 부분이 없기 때문인데, 이 코드에서는 Comparator를 상속받는 모든 클래스에서 Comparator가 갖는 함수를 모두 사용하기 때문에 인터페이스를 분리하지 않았다.
  다섯 번째로 DIP, 의존 역전 원칙이 적용된 부분은 Sort와 sorter가 자식 클래스와 연관되지 않고 부모 클래스(인터페이스)와 연관된 부분인것 같다. 변화하기 쉬운 자식 클래스가 아닌 변화하기 어려운 인터페이스와 의존 관계를 맺고 있기 때문이다.